package recfun
import common._
import scala.util.parsing.combinator.Head

object Main {
  def main(args: Array[String]) {
//    println("Pascal's Triangle")
//    for (row <- 0 to 10) {
//      for (col <- 0 to row)
//        print(pascal(col, row) + " ")
//      println()
//    }
	  println("(if (zero? x) max (/ 1 x))==="+balance("(if (zero? x) max (/ 1 x))" toList))
	  println("I told him (that it’s not (yet) done). (But he wasn’t listening)==="+balance("I told him (that it’s not (yet) done). (But he wasn’t listening)" toList))
	  println(":-)==="+balance(":-)" toList))
	  println("())(==="+balance("())(" toList))
  }

  /**
   * Exercise 1
   */
  def pascal(c: Int, r: Int): Int =
      if (c == 0 || c == r) 1
      else pascal(c-1,r-1)+pascal(c,r-1)

  /**
   * Exercise 2
   */
  def balance(chars: List[Char]): Boolean = 
      def balanceStep(chars: List[Char], opened: Int) =
          chars head match {
          
      }

  /**
   * Exercise 3
   */
  def countChange(money: Int, coins: List[Int]): Int = ???
}
