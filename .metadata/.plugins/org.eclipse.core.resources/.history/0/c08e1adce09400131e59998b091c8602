package ksiazka

object ala {

    class ScalonaStrona(strony: List[Any]){
    	override def toString = strony.foldLeft("")((x,y)=>x+","+y)
    }
    
    class ZbitkaStron(x: List[ScalonaStrona]) {
        val strony = pierwszaStrona(x)
        def pierwszaStrona(zbitka: List[ScalonaStrona]): List[ScalonaStrona] =
            zbitka.length match {
                case 0 => List()
                case _ => zbitka.last :: zbitka.head :: drugaStrona(zbitka.drop(1).dropRight(1))
            }

        def drugaStrona(zbitka: List[ScalonaStrona]): List[ScalonaStrona] =
            zbitka.length match {
                case 0 => List()
                case _ => zbitka.head :: zbitka.last :: pierwszaStrona(zbitka.drop(1).dropRight(1))
            }
            
        override def toString() = strony.foldLeft("")((x,y)=>x+","+y)
    }
    
    class Ksiazka(zbitki: List[ZbitkaStron])

    def scalStrony(strony: List[Any], dzielnik: Int): List[ScalonaStrona] = {
        strony.length match {
            case 0 => List()
            case _ => new ScalonaStrona(List(strony.slice(0, dzielnik))) :: scalStrony(strony.drop(dzielnik), dzielnik)
        }
    }                                             //> scalStrony: (strony: List[Any], dzielnik: Int)List[ksiazka.ala.ScalonaStron
                                                  //| a]

    def zbitki(strony: List[ScalonaStrona], dzielnik: Int): List[ZbitkaStron] = {
        if ((dzielnik % 2) != 0) throw new IllegalArgumentException("nie parzyste!"+dzielnik)
        strony.length match {
            case 0 => List()
            case _ => new ZbitkaStron(strony.slice(0, dzielnik)) :: zbitki(strony.drop(dzielnik), dzielnik)
        }
    }                                             //> zbitki: (strony: List[ksiazka.ala.ScalonaStrona], dzielnik: Int)List[ksiazk
                                                  //| a.ala.ZbitkaStron]

    def pierwszaStrona(zbitka: List[Any]): List[Any] =
        zbitka.length match {
            case 0 => List()
            case _ => zbitka.last :: zbitka.head :: drugaStrona(zbitka.drop(1).dropRight(1))
        }                                         //> pierwszaStrona: (zbitka: List[Any])List[Any]

    def drugaStrona(zbitka: List[Any]): List[Any] =
        zbitka.length match {
            case 0 => List()
            case _ => zbitka.head :: zbitka.last :: pierwszaStrona(zbitka.drop(1).dropRight(1))
        }                                         //> drugaStrona: (zbitka: List[Any])List[Any]

    def podziel(stron: Int, kartekWZbitce: Int = 5, stronNaStrone: Int = 2) = {
        val scaloneStrony = scalStrony(1 to stron toList, stronNaStrone)
        val stronWZbitce = kartekWZbitce * 2 * 2
        val zbitkiDoDruku = zbitki(scaloneStrony, stronWZbitce)
        zbitkiDoDruku
    }                                             //> podziel: (stron: Int, kartekWZbitce: Int, stronNaStrone: Int)List[ksiazka.a
                                                  //| la.ZbitkaStron]

    println(podziel(16, 4, 1))                    //> List(,,List(16),,List(1),,List(2),,List(15),,List(14),,List(3),,List(4),,Li
                                                  //| st(13),,List(12),,List(5),,List(6),,List(11),,List(10),,List(7),,List(8),,L
                                                  //| ist(9))
}